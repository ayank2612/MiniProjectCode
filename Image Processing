 var shp=ee.FeatureCollection(roi_naini)
Map.addLayer(shp, {},'My polygon');

var l5 = ee.ImageCollection("LANDSAT/LT05/C01/T1_SR")
    .filterBounds(roi_naini)
    .filterDate('2010-04-01', '2010-04-30')
    .sort('CLOUD_COVER')
    .first()
    .clip(roi_naini);

Map.addLayer(l5, {
  bands: ['B2', 'B3', 'B4'], min: 0, max: 0.3, gamma: 1.4}, 'nainital');

Map.centerObject(l5, 11);

var training_points = wtr.merge(urb).merge(brn).merge(agr).merge(fors);
print(training_points);
var training_data = l5.sampleRegions({
                    collection:training_points,
                    properties: ['LULC'],
                    scale: 30})
print(training_data);
var classifier = ee.Classifier.smileRandomForest(200)
var classifier = classifier.train({features: training_data,
classProperty: "LULC",
inputProperties: ["B2","B3","B4","B5","B6","B7"]});
var classified_image = l5.classify(classifier); 
Map.addLayer(classified_image, {min: 0, max: 4, palette: ['1728f','ff0000','d7a376', 'eef855','23841d']},
'classified image');

Map.add(ui.Label(
    '2010 Land Cover Map of NAINITAL',  {
      fontWeight: 'bold', BackgroundColor: 'FBF9F5',fontSize: '14px'}));
      
 // legend //
var names = [ 'Water_body','Urban', 'Barren_Land','Agriculture','Forest' ];

var values = [ '0', '1', '2','3','4' ];
    
var legendsPalette = ['1728ff','ff0000','d7a376', 'eef855','23841d'];

// set position of panel
var legend = ui.Panel({style: { position: 'bottom-left', padding: '8px 15px'}});
 
// Create legend title
var legendTitle = ui.Label({value: 'Land Cover Legends ',style: {
  fontWeight: 'bold', fontSize: '18px', margin: '0 0 4px 0', padding: '0' }});
 
// Add the title to the panel
legend.add(legendTitle);
 
var makeRow = function(color, name) {
  // Create the label that is actually the colored box.
  var colorBox = ui.Label({
    style: {
      backgroundColor: '#' + color, padding: '8px',margin: '0 0 4px 0'} });

  // Create the label filled with the description text.
  var description = ui.Label({
    value: name, style: {margin: '0 0 4px 6px'}});

  // return the panel
  return ui.Panel({
    widgets: [colorBox, description],layout: ui.Panel.Layout.Flow('horizontal')})};
 
// Add color and and names
for (var i = 0; i < 5; i++) {
  legend.add(makeRow(legendsPalette[i], names[i]));
  }  

// Add the legend to the map.
Map.add(legend);

print(classifier.confusionMatrix()); 

Export.image.toDrive({
  image: classified_image,
  description: 'imageToDriveExample',
  scale: 30,
  region: geometry
});
var withRandom = training_data.randomColumn('random');
var split = 0.7; 
var trainingPartition = withRandom.filter(ee.Filter.lt('random', split));
var testingPartition = withRandom.filter(ee.Filter.gte('random', split));

var trainedClassifier = ee.Classifier.smileRandomForest(20).train({
  features: trainingPartition,
  classProperty: 'LULC',
inputProperties: ["B2","B3","B4","B5","B6","B7"]
});
var test_1 = testingPartition.classify(trainedClassifier);
var confusionMatrix_2001 = test_1.errorMatrix('LULC', 'classification');
print('Confusion Matrix 2009', confusionMatrix_2001);
print('Validation Overall Accuracy: ', confusionMatrix_2001.accuracy());
print('Kappa co-efficient: ', confusionMatrix_2001.kappa());


//selecting class form classified image
var water=classified_image.select('classification').eq(0);
var urban=classified_image.select('classification').eq(1);
var barren=classified_image.select('classification').eq(2);
var agri=classified_image.select('classification').eq(3);
var forest=classified_image.select('classification').eq(4);

//calculating the area of the classified image
var area_water=water.multiply(ee.Image.pixelArea()).divide(1000000);
var area_urban=urban.multiply(ee.Image.pixelArea()).divide(1000000);
var area_barren=barren.multiply(ee.Image.pixelArea()).divide(1000000);
var area_agri=agri.multiply(ee.Image.pixelArea()).divide(1000000);
var area_forest=forest.multiply(ee.Image.pixelArea()).divide(1000000);

var stat1=area_water.reduceRegion({
  reducer:ee.Reducer.sum(),
  geometry:roi_naini,
  scale:30,
  maxPixels:1e9
});

var stat2=area_urban.reduceRegion({
  reducer:ee.Reducer.sum(),
  geometry:roi_naini,
  scale:30,
  maxPixels:1e9
});

var stat3=area_barren.reduceRegion({
  reducer:ee.Reducer.sum(),
  geometry:roi_naini,
  scale:30,
  maxPixels:1e9
});

var stat4=area_agri.reduceRegion({
  reducer:ee.Reducer.sum(),
  geometry:roi_naini,
  scale:30,
  maxPixels:1e9
});

var stat5=area_forest.reduceRegion({
  reducer:ee.Reducer.sum(),
  geometry:roi_naini,
  scale:30,
  maxPixels:1e9
});


print("Area of water in Sq KM: ",stat1);
print("Area of urban in Sq KM: ",stat2);
print("Area of barrenLand in Sq KM: ",stat3);
print("Area of agriculture in Sq KM: ",stat4);
print("Area of forest in Sq KM: ",stat5);
